// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.j1987.coffeeroo.domain;

import com.j1987.coffeeroo.domain.JBill;
import com.j1987.coffeeroo.domain.JBillDataOnDemand;
import com.j1987.coffeeroo.domain.JSubmissionForApprovalDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect JBillDataOnDemand_Roo_DataOnDemand {
    
    declare @type: JBillDataOnDemand: @Component;
    
    private Random JBillDataOnDemand.rnd = new SecureRandom();
    
    private List<JBill> JBillDataOnDemand.data;
    
    @Autowired
    JSubmissionForApprovalDataOnDemand JBillDataOnDemand.jSubmissionForApprovalDataOnDemand;
    
    public JBill JBillDataOnDemand.getNewTransientJBill(int index) {
        JBill obj = new JBill();
        setAmountWithoutTaxes(obj, index);
        setArea(obj, index);
        setDateOfBill(obj, index);
        setPeriodTitle(obj, index);
        setReference(obj, index);
        setTotalWeightProductAllowed(obj, index);
        setTotalWeightProductPushed(obj, index);
        return obj;
    }
    
    public void JBillDataOnDemand.setAmountWithoutTaxes(JBill obj, int index) {
        BigDecimal amountWithoutTaxes = BigDecimal.valueOf(index);
        obj.setAmountWithoutTaxes(amountWithoutTaxes);
    }
    
    public void JBillDataOnDemand.setArea(JBill obj, int index) {
        String area = "area_" + index;
        obj.setArea(area);
    }
    
    public void JBillDataOnDemand.setDateOfBill(JBill obj, int index) {
        Date dateOfBill = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfBill(dateOfBill);
    }
    
    public void JBillDataOnDemand.setPeriodTitle(JBill obj, int index) {
        String periodTitle = "periodTitle_" + index;
        obj.setPeriodTitle(periodTitle);
    }
    
    public void JBillDataOnDemand.setReference(JBill obj, int index) {
        String reference = "reference_" + index;
        obj.setReference(reference);
    }
    
    public void JBillDataOnDemand.setTotalWeightProductAllowed(JBill obj, int index) {
        BigDecimal totalWeightProductAllowed = BigDecimal.valueOf(index);
        obj.setTotalWeightProductAllowed(totalWeightProductAllowed);
    }
    
    public void JBillDataOnDemand.setTotalWeightProductPushed(JBill obj, int index) {
        BigDecimal totalWeightProductPushed = BigDecimal.valueOf(index);
        obj.setTotalWeightProductPushed(totalWeightProductPushed);
    }
    
    public JBill JBillDataOnDemand.getSpecificJBill(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        JBill obj = data.get(index);
        Long id = obj.getId();
        return JBill.findJBill(id);
    }
    
    public JBill JBillDataOnDemand.getRandomJBill() {
        init();
        JBill obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return JBill.findJBill(id);
    }
    
    public boolean JBillDataOnDemand.modifyJBill(JBill obj) {
        return false;
    }
    
    public void JBillDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = JBill.findJBillEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'JBill' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<JBill>();
        for (int i = 0; i < 10; i++) {
            JBill obj = getNewTransientJBill(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
